# -*- coding: utf-8 -*-
"""Array_In_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zjm_YU23TwqXtzw4xyjJHYEMliDYDtRV

# Array in Python

---

##  1. What is an Array?

An **array** is a **collection of elements of the same data type**, stored at **contiguous memory locations**.

- Arrays store **multiple values** in a single variable.
- They are **more memory-efficient** and **faster** than Python lists (for numerical data).
- Unlike lists, arrays **cannot store mixed data types** — all elements must be of the same type.

---

##  2. Why Use Arrays?

- To store **large amounts of similar data**  
- To perform **mathematical or logical operations** efficiently  
- To **save memory** compared to lists  
- To **access elements quickly** using index  

---

##  3. Ways to Define Arrays in Python

- There are **three main ways** to define arrays in Python:
     
     i) Using List

     ii) Using Array module

     iii) Using Numpy

## ---------- Using List ------------
"""

arr = [10, 20, 30, 40]
print(arr)
print(arr[0])  # 10
arr[2] = 50
print(arr)     # [10, 20, 50, 40]

"""---

# -------------- Array Module -----------------
## What is the array module in Python?

- Python already has a built-in list data type, but lists can store mixed data types (like int, float, string, etc.), which makes them less memory-efficient.

- If you need to store only one type of data (like all integers or all floats)  and want faster and smaller memory usage, you can use the array module.

- So, array module provides a way to create typed arrays —> arrays that store only one type of element.

---

## Importing and Creating an Array


 Syntax :
     
    import array
   
    arr = array.array(typecode, [elements])

- typecode → represents the type of elements you want to store (like i for integer, f for float, etc.)

- elements → list of values you want to store in the array.

### Common Typecodes

| Typecode | Data Type        | Size (in bytes) |
| -------- | ---------------- | --------------- |
| `'b'`    | signed integer   | 1 byte          |
| `'B'`    | unsigned integer | 1 byte          |
| `'i'`    | signed integer   | 2 or 4 bytes    |
| `'I'`    | unsigned integer | 2 or 4 bytes    |
| `'f'`    | float            | 4 bytes         |
| `'d'`    | double float     | 8 bytes         |
"""

import array

arr = array.array('i', [10, 20, 30, 40])
print("Array elements:", arr)

# Output:
# Array elements: array('i', [10, 20, 30, 40])

print(arr[0])   # 10
print(arr[2])   # 30

arr.append(50)       # Add element at end
arr.insert(2, 25)    # Insert at position 2
print(arr)           # array('i', [10, 20, 25, 30, 40, 50])

arr.remove(25)       # Remove element by value
arr.pop()            # Remove last element
print(arr)           # array('i', [10, 20, 30, 40])

for num in arr:
    print(num, end=" ")
# Output: 10 20 30 40

lst = arr.tolist()
print(lst)   # [10, 20, 30, 40]

"""## Common Array Methods

| **Method**         | **Description**                                             | **Example**                  |
| ------------------ | ----------------------------------------------------------- | ---------------------------- |
| `append(x)`        | Adds an element `x` to the end of the array.                | `arr.append(50)`             |
| `insert(i, x)`     | Inserts element `x` at index `i`.                           | `arr.insert(2, 25)`          |
| `extend(iterable)` | Appends elements from another iterable (like list/array).   | `arr.extend([60, 70])`       |
| `remove(x)`        | Removes the first occurrence of element `x`.                | `arr.remove(20)`             |
| `pop([i])`         | Removes and returns element at index `i` (last by default). | `arr.pop(2)`                 |
| `index(x)`         | Returns the index of the first occurrence of `x`.           | `arr.index(30)`              |
| `reverse()`        | Reverses the array in place.                                | `arr.reverse()`              |
| `count(x)`         | Returns how many times `x` occurs.                          | `arr.count(10)`              |
| `buffer_info()`    | Returns a tuple with memory info `(address, length)`.       | `arr.buffer_info()`          |
| `typecode`         | Returns the typecode used for the array.                    | `arr.typecode`               |
| `itemsize`         | Returns size in bytes of one array item.                    | `arr.itemsize`               |
| `tolist()`         | Converts array to a normal Python list.                     | `arr.tolist()`               |
| `fromlist(list)`   | Appends items from a list.                                  | `arr.fromlist([80, 90])`     |
| `tobytes()`        | Converts array to bytes representation.                     | `arr.tobytes()`              |
| `frombytes(bytes)` | Reads array items from a bytes object.                      | `arr.frombytes(b'\x00\x01')` |


----

## Key Differences between List and Array

| Feature       | List                  | Array (from `array` module) |
| ------------- | --------------------- | --------------------------- |
| Data Type     | Can store mixed types | Only one data type          |
| Memory        | Uses more memory      | Uses less memory            |
| Speed         | Slightly slower       | Faster for numerical data   |
| Type Checking | Not strict            | Strict type checking        |

---

# ----------- Numpy Array ------------

## What is NumPy?

- NumPy (Numerical Python) is a Python library used for scientific and numerical computation.

- It provides a powerful object called ndarray (n-dimensional array) that is much faster and more memory efficient than Python’s built-in list or array module.

 ## Importing NumPy
"""

import numpy as np

"""## What is a NumPy Array?

- A NumPy array is a homogeneous collection of elements (all same type) arranged in n dimensions.

- 1D → Vector

- 2D → Matrix

- 3D → Tensor


"""

import numpy as np

arr = np.array([10, 20, 30, 40])
print(arr)
print(type(arr))

"""----

## Ways to Create NumPy Arrays



| **Method**                           | **Description**                 | **Example**                   |
| ------------------------------------ | ------------------------------- | ----------------------------- |
| `np.array()`                         | From list/tuple                 | `np.array([1,2,3])`           |
| `np.zeros(shape)`                    | Array filled with 0s            | `np.zeros((2,3))`             |
| `np.ones(shape)`                     | Array filled with 1s            | `np.ones((3,2))`              |
| `np.full(shape, value)`              | Array filled with a given value | `np.full((2,2), 5)`           |
| `np.eye(n)`                          | Identity matrix                 | `np.eye(3)`                   |
| `np.arange(start, stop, step)`       | Like Python `range()`           | `np.arange(1, 10, 2)`         |
| `np.linspace(start, stop, num)`      | Evenly spaced values            | `np.linspace(0, 1, 5)`        |
| `np.random.rand(shape)`              | Random values (0–1)             | `np.random.rand(2,3)`         |
| `np.random.randint(low, high, size)` | Random integers                 | `np.random.randint(1, 10, 5)` |

----

## Important Attributes of NumPy Arrays

| **Attribute** | **Meaning**                    | **Example**    |
| ------------- | ------------------------------ | -------------- |
| `ndim`        | Number of dimensions           | `arr.ndim`     |
| `shape`       | Size of each dimension         | `arr.shape`    |
| `size`        | Total number of elements       | `arr.size`     |
| `dtype`       | Data type of elements          | `arr.dtype`    |
| `itemsize`    | Size (in bytes) of one element | `arr.itemsize` |
| `nbytes`      | Total bytes consumed           | `arr.nbytes`   |
"""

a = np.array([[1,2,3],[4,5,6]])
print(a.ndim)     # 2
print(a.shape)    # (2, 3)
print(a.size)     # 6
print(a.dtype)    # int64 (depends on system)

"""## Array Operations

- NumPy arrays support vectorized operations (element-wise).


"""

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

print(a + b)   # [5 7 9]
print(a - b)   # [-3 -3 -3]
print(a * b)   # [4 10 18]
print(a / b)   # [0.25 0.4 0.5]
print(a ** 2)  # [1 4 9]

"""## Array Indexing and Slicing


"""

arr = np.array([10, 20, 30, 40, 50])

print(arr[0])      # 10
print(arr[-1])     # 50
print(arr[1:4])    # [20 30 40]

# 2D Array
mat = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(mat[0, 1])   # 2
print(mat[:, 1])   # [2 5 8]
print(mat[1, :])   # [4 5 6]

"""----

## Reshaping and Flattening


| **Method**       | **Description**                               | **Example**        |
| ---------------- | --------------------------------------------- | ------------------ |
| `reshape(shape)` | Change dimensions                             | `arr.reshape(2,3)` |
| `flatten()`      | Convert to 1D                                 | `arr.flatten()`    |
| `ravel()`        | Similar to flatten (returns view if possible) | `arr.ravel()`      |

----

## Mathematical Functions

| Function                             | Description             | Example        |
| ------------------------------------ | ----------------------- | -------------- |
| `np.min()` / `np.max()`              | Minimum / Maximum       | `np.max(arr)`  |
| `np.sum()`                           | Sum of all elements     | `np.sum(arr)`  |
| `np.mean()`                          | Average                 | `np.mean(arr)` |
| `np.std()`                           | Standard deviation      | `np.std(arr)`  |
| `np.sqrt()`                          | Square root             | `np.sqrt(arr)` |
| `np.exp()`                           | Exponential             | `np.exp(arr)`  |
| `np.log()`                           | Natural log             | `np.log(arr)`  |
| `np.sin()` / `np.cos()` / `np.tan()` | Trigonometric functions | `np.sin(arr)`  |

---

## Array Manipulation Methods

| Method                  | Description            |
| ----------------------- | ---------------------- |
| `np.concatenate((a,b))` | Join two arrays        |
| `np.vstack((a,b))`      | Stack vertically       |
| `np.hstack((a,b))`      | Stack horizontally     |
| `np.split(arr, n)`      | Split array into parts |
| `np.transpose(arr)`     | Transpose matrix       |
| `np.sort(arr)`          | Sort elements          |
| `np.unique(arr)`        | Find unique elements   |
"""

A = np.array([[1,2],[3,4]])
B = np.array([[5,6],[7,8]])

print(A.dot(B))       # Matrix multiplication
print(np.transpose(A)) # Transpose
print(np.linalg.inv(A)) # Inverse
print(np.linalg.det(A)) # Determinant
print(np.linalg.eig(A)) # Eigen values & vectors

"""----

## Matrix Operations
"""

A = np.array([[1,2],[3,4]])
B = np.array([[5,6],[7,8]])

print(A.dot(B))       # Matrix multiplication
print(np.transpose(A)) # Transpose
print(np.linalg.inv(A)) # Inverse
print(np.linalg.det(A)) # Determinant
print(np.linalg.eig(A)) # Eigen values & vectors